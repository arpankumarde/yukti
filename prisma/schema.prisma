generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  companyId   String      @id @default(cuid())
  name        String      @db.VarChar(100)
  email       String      @unique @db.VarChar(100)
  phone       String?     @db.VarChar(20)
  password    String
  description String?     @db.Text
  logo        String?
  slug        String      @unique @default(uuid())
  website     String?
  address     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  recruiters  Recruiter[]
  jobs        Job[]

  @@index([email])
}

model Recruiter {
  recruiterId String   @id @default(cuid())
  name        String
  email       String   @unique @db.VarChar(100)
  phone       String?  @db.VarChar(20)
  password    String
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [companyId], onDelete: Cascade, onUpdate: Cascade)

  @@index([companyId, email])
}

model Applicant {
  applicantId  String        @id @default(cuid())
  name         String
  email        String        @unique @db.VarChar(100)
  phone        String        @db.VarChar(20)
  password     String
  slug         String        @unique @default(dbgenerated()) @db.Uuid
  trustScore   Float?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  resumes      Resume[]

  @@index([email])
}

model Job {
  id           String        @id @default(cuid())
  title        String
  description  String?
  location     String        @default("Remote")
  perks        String?
  salary       String?
  companyId    String
  vacancy      Int
  skills       String[]      @default([])
  status       JobStatus     @default(ACTIVE)
  experience   String        @default("Fresher")
  jobType      String        @default("Full Time")
  applyBy      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  interviews   Interview[]
  company      Company       @relation(fields: [companyId], references: [companyId], onDelete: Cascade)

  @@index([companyId])
}

model Application {
  applicationId    String             @id @default(cuid())
  applicantId      String
  jobId            String
  status           String?
  comments         String?
  resume           String?
  cover_letter     String?
  score            Int?
  keywords         String[]           @default([])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  strength         String?
  weakness         String?
  applicant        Applicant          @relation(fields: [applicantId], references: [applicantId], onDelete: Cascade)
  job              Job                @relation(fields: [jobId], references: [id], onDelete: Cascade)
  InterviewSession InterviewSession[]

  @@unique([applicantId, jobId])
}

model Interview {
  interviewId      String             @id @default(cuid())
  jobId            String
  title            String
  type             InterviewType      @default(NOCODE)
  conductWithAI    Boolean            @default(true)
  conductOffline   Boolean            @default(false)
  scheduledAt      DateTime?
  completeBy       DateTime?
  location         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  questions        InterviewQA[]
  InterviewSession InterviewSession[]
  job              Job                @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model InterviewQA {
  interviewQAId String    @id @default(cuid())
  interviewId   String
  question      String
  answer        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  interview     Interview @relation(fields: [interviewId], references: [interviewId], onDelete: Cascade)

  @@index([interviewId])
}

model InterviewSession {
  interviewSessionId String      @id @default(cuid())
  interviewId        String
  applicationId      String
  transcript         Json[]      @default([])
  rating             Int?        @db.SmallInt
  feedback           String?
  attempted          Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  interview          Interview   @relation(fields: [interviewId], references: [interviewId], onDelete: Cascade)
  application        Application @relation(fields: [applicationId], references: [applicationId], onDelete: Cascade)

  @@unique([interviewId, applicationId])
}

model Resume {
  resumeId    String    @id @default(cuid())
  title       String
  fileUrl     String
  isDefault   Boolean   @default(false)
  applicantId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  applicant   Applicant @relation(fields: [applicantId], references: [applicantId], onDelete: Cascade)

  @@index([applicantId])
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum InterviewType {
  CODE
  NOCODE
}
