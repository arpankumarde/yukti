generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recruiter {
  recruiterId       String              @id @default(cuid())
  name              String
  email             String              @unique
  password          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  InterviewSchedule InterviewSchedule[]
  jobs              Job[]
  MockInterview     MockInterview[]
}

model Applicant {
  applicantId  String        @id @default(cuid())
  name         String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
}

model Job {
  id                String              @id @default(cuid())
  title             String
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  recruiterId       String
  experience        String              @default("Fresher")
  applications      Application[]
  InterviewSchedule InterviewSchedule[]
  recruiter         Recruiter           @relation(fields: [recruiterId], references: [recruiterId])
}

model Application {
  applicationId String          @id @default(cuid())
  applicantId   String
  jobId         String
  status        String?
  comments      String?
  resume        String?
  cover_letter  String?
  score         String?         @default("Not Scored")
  strength      String?
  weakness      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  applicant     Applicant       @relation(fields: [applicantId], references: [applicantId])
  job           Job             @relation(fields: [jobId], references: [id])
  mockInterview MockInterview[]
}

model InterviewSchedule {
  interviewScheduleId String     @id @default(cuid())
  scheduledAt         DateTime
  location            String?
  comments            String?
  jobId               String
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  recruiterId         String?
  job                 Job        @relation(fields: [jobId], references: [id])
  recruiter           Recruiter? @relation(fields: [recruiterId], references: [recruiterId])
}

model MockInterview {
  mockInterviewId String            @id @default(cuid())
  scheduledAt     DateTime
  location        String?
  feedback        String?
  applicationId   String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  recruiterId     String?
  application     Application       @relation(fields: [applicationId], references: [applicationId])
  recruiter       Recruiter?        @relation(fields: [recruiterId], references: [recruiterId])
  questions       MockInterviewQA[]
}

model MockInterviewQA {
  mockInterviewQAId String        @id @default(cuid())
  question          String
  answer            String?
  answerFeedback    String?
  mockInterviewId   String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  mockInterview     MockInterview @relation(fields: [mockInterviewId], references: [mockInterviewId])
}
